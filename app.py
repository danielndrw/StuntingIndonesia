# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zYTQrzw4n6dTT3PZ44hCY9qsoNeg4k8d
"""

# ================================================================
# STREAMLIT APP - STUNTING INDONESIA DASHBOARD
# Fitur:
# 1Ô∏è‚É£ Clustering tingkat kerentanan stunting
# 2Ô∏è‚É£ Klasifikasi daerah sehat vs tidak sehat
# 3Ô∏è‚É£ Prediksi stunting (regresi)
# ================================================================

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import joblib, os, json, requests

# ================================================================
# 1. SETUP DASHBOARD
# ================================================================
st.set_page_config(
    page_title="üìä Stunting Indonesia Dashboard",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("üáÆüá© Dashboard Analisis Stunting Indonesia")
st.markdown("### *Prediksi, Klasifikasi, dan Clustering berdasarkan Data Sosial Ekonomi*")
st.markdown("---")

# ================================================================
# 2. LOAD DATASET
# ================================================================
@st.cache_data
def load_data():
    return pd.read_excel("DATA_SUM_STUNTING.xlsx")

df = load_data()

# ================================================================
# 3. LOAD GEOJSON DENGAN BACKUP OTOMATIS
# ================================================================
PROV_COORDS = {
    "ACEH": (4.70, 96.75), "SUMATERA UTARA": (2.11, 99.55), "SUMATERA BARAT": (-0.74, 100.80),
    "RIAU": (0.29, 101.71), "KEPULAUAN RIAU": (0.92, 104.45), "JAMBI": (-1.61, 103.61),
    "SUMATERA SELATAN": (-3.32, 104.91), "BENGKULU": (-3.58, 102.35), "LAMPUNG": (-4.56, 105.41),
    "KEP. BANGKA BELITUNG": (-2.74, 106.44), "BANTEN": (-6.41, 106.06), "DKI JAKARTA": (-6.17, 106.83),
    "JAWA BARAT": (-6.89, 107.64), "JAWA TENGAH": (-7.15, 110.14), "D I YOGYAKARTA": (-7.79, 110.37),
    "JAWA TIMUR": (-7.54, 112.24), "BALI": (-8.34, 115.09), "NUSA TENGGARA BARAT": (-8.65, 117.36),
    "NUSA TENGGARA TIMUR": (-8.66, 121.08), "KALIMANTAN BARAT": (-0.13, 111.10), "KALIMANTAN TENGAH": (-1.68, 113.38),
    "KALIMANTAN SELATAN": (-3.09, 115.28), "KALIMANTAN TIMUR": (0.54, 116.42), "KALIMANTAN UTARA": (2.84, 117.39),
    "SULAWESI UTARA": (1.49, 124.84), "GORONTALO": (0.70, 122.45), "SULAWESI TENGAH": (-1.43, 121.45),
    "SULAWESI BARAT": (-2.84, 119.23), "SULAWESI SELATAN": (-3.67, 119.97), "SULAWESI TENGGARA": (-4.14, 122.17),
    "MALUKU": (-3.24, 130.15), "MALUKU UTARA": (1.57, 127.81), "PAPUA": (-4.27, 138.08),
    "PAPUA BARAT": (-1.34, 133.17), "PAPUA BARAT DAYA": (-0.88, 131.26), "PAPUA PEGUNUNGAN": (-4.10, 138.94),
    "PAPUA SELATAN": (-8.49, 140.40), "PAPUA TENGAH": (-3.36, 135.50)
}

@st.cache_data
def load_geojson():
    url = "https://raw.githubusercontent.com/superpikar/indonesia-geojson/master/indonesia-province.geojson"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        st.success("üåç GeoJSON berhasil dimuat dari sumber online.")
        return response.json()
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Tidak bisa memuat GeoJSON online: {e}")

    local_path = "indonesia_province.geojson"
    if os.path.exists(local_path):
        try:
            with open(local_path, "r", encoding="utf-8") as f:
                st.info("üìÅ Menggunakan file GeoJSON lokal.")
                return json.load(f)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è File lokal tidak valid: {e}")

    # fallback terakhir: buat peta titik manual
    st.error("‚ùå Tidak dapat memuat GeoJSON, menggunakan peta titik sederhana.")
    dummy = {"type": "FeatureCollection", "features": []}
    for prov, (lat, lon) in PROV_COORDS.items():
        dummy["features"].append({
            "type": "Feature",
            "properties": {"Propinsi": prov},
            "geometry": {"type": "Point", "coordinates": [lon, lat]},
        })
    return dummy

geojson = load_geojson()

# ================================================================
# 4. LOAD MODEL
# ================================================================
@st.cache_resource
def load_models():
    cluster = joblib.load("models/cluster_model.pkl")
    clf = joblib.load("models/classification_model.pkl")
    reg = joblib.load("models/regression_model.pkl")
    return cluster, clf, reg

cluster_model, clf_model, reg_model = load_models()

# ================================================================
# 5. SIDEBAR NAVIGATION
# ================================================================
st.sidebar.title("üìÅ Pilih Fitur Analisis")
option = st.sidebar.radio(
    "Pilih mode analisis:",
    ["üß≠ Clustering", "üè• Klasifikasi Kesehatan", "üìà Prediksi Stunting"]
)

# ================================================================
# 6. CLUSTERING
# ================================================================
if option == "üß≠ Clustering":
    st.subheader("üß≠ Clustering Tingkat Kerentanan Stunting per Provinsi")

    cluster_labels = cluster_model.predict(df.select_dtypes(include=[np.number]))
    df["Cluster"] = cluster_labels

    cluster_map = {0: "Sejahtera (Maju)", 1: "Sedang (Mainstream)", 2: "Rentan (Tertinggal)"}
    df["Kategori_Cluster"] = df["Cluster"].map(cluster_map)

    fig = px.choropleth(
        df,
        geojson=geojson,
        featureidkey="properties.Propinsi",
        locations="Provinsi",
        color="Kategori_Cluster",
        color_discrete_map={
            "Sejahtera (Maju)": "green",
            "Sedang (Mainstream)": "orange",
            "Rentan (Tertinggal)": "red"
        },
        title="üó∫Ô∏è Peta Clustering Kerentanan Stunting per Provinsi"
    )
    fig.update_geos(fitbounds="locations", visible=False)
    st.plotly_chart(fig, use_container_width=True)

# ================================================================
# 7. KLASIFIKASI
# ================================================================
elif option == "üè• Klasifikasi Kesehatan":
    st.subheader("üè• Klasifikasi Daerah Sehat vs Tidak Sehat")

    y_pred = clf_model.predict(df.select_dtypes(include=[np.number]))
    df["Prediksi_Sehat"] = np.where(y_pred == 1, "Sehat", "Tidak Sehat")

    fig = px.choropleth(
        df,
        geojson=geojson,
        featureidkey="properties.Propinsi",
        locations="Provinsi",
        color="Prediksi_Sehat",
        color_discrete_map={"Sehat": "green", "Tidak Sehat": "red"},
        title="üó∫Ô∏è Peta Klasifikasi Daerah Sehat vs Tidak Sehat"
    )
    fig.update_geos(fitbounds="locations", visible=False)
    st.plotly_chart(fig, use_container_width=True)

# ================================================================
# 8. REGRESI
# ================================================================
else:
    st.subheader("üìà Prediksi Stunting Tahun Depan")

    X = df.select_dtypes(include=[np.number])
    df["Prediksi_Stunting_TahunDepan"] = reg_model.predict(X)

    fig = px.choropleth(
        df,
        geojson=geojson,
        featureidkey="properties.Propinsi",
        locations="Provinsi",
        color="Prediksi_Stunting_TahunDepan",
        color_continuous_scale="RdYlGn_r",
        title="üó∫Ô∏è Prediksi Persentase Stunting Tahun Depan"
    )
    fig.update_geos(fitbounds="locations", visible=False)
    st.plotly_chart(fig, use_container_width=True)

    st.dataframe(df[["Provinsi", "Prediksi_Stunting_TahunDepan"]].sort_values("Prediksi_Stunting_TahunDepan"))