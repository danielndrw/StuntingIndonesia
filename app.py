# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zYTQrzw4n6dTT3PZ44hCY9qsoNeg4k8d
"""

# ============================================================
# STREAMLIT APP - SESUAI PIPELINE ASLI
# ============================================================

import streamlit as st
import pandas as pd
import numpy as np
import joblib, requests, json, os
import plotly.express as px

st.set_page_config(page_title="Bismillah Ga Stunting", layout="wide")

# -------------------------------
# LOAD DATA
# -------------------------------
uploaded = st.sidebar.file_uploader("ðŸ“‚ Upload file (.xlsx)", type=["xlsx"])
if uploaded:
    df = pd.read_excel(uploaded)
else:
    df = pd.read_excel("DATA_SUM_STUNTING.xlsx")

# -------------------------------
# GEOJSON
# -------------------------------
@st.cache_data
def load_geojson():
    url = "https://raw.githubusercontent.com/superpikar/indonesia-geojson/master/indonesia-prov.geojson"
    return json.loads(requests.get(url).text)

geojson = load_geojson()

# -------------------------------
# LOAD MODELS
# -------------------------------
cluster_model = joblib.load("models/cluster_model.pkl")
cls_model = joblib.load("models/classification_model.pkl")
reg_model = joblib.load("models/regression_model.pkl")

# -------------------------------
# FEATURE ENGINEERING
# -------------------------------
def preprocess(df):
    df = df.copy()
    df = df.groupby('Provinsi').apply(lambda g: g.fillna(g.mean())).reset_index(drop=True)
    df.drop_duplicates(inplace=True)

    # log & rasio
    df['log_Anggaran_Bansos'] = np.log1p(df['Anggaran_Bansos'])
    df['log_Jumlah_KPM_Bansos'] = np.log1p(df['Jumlah_KPM_Bansos'])
    df['log_Garis_Kemiskinan_Makanan'] = np.log1p(df['Garis_Kemiskinan_Makanan'])
    df['IPM_x_LamaSekolah'] = df['IPM'] * df['Lama_Sekolah']
    df['AksesGabungan'] = df['Akses_Air_Layak'] * df['Akses_Sanitasi_Layak']
    df['Pengangguran_per_IPM'] = df['Tingkat_Pengangguran'] / (df['IPM'] + 1e-6)
    df['Bansos_per_KPM'] = np.where(df['Jumlah_KPM_Bansos'] > 0,
                                    df['Anggaran_Bansos'] / df['Jumlah_KPM_Bansos'],
                                    df['Anggaran_Bansos'])
    df['Konsumsi_vs_IPM'] = df['Konsumsi_Pangan_Tidak_Cukup'] / (df['IPM'] + 1e-6)
    return df

df = preprocess(df)

FEATURES_BASE = [
    'IPM','Akses_Sanitasi_Layak','Akses_Air_Layak','Air_Kemasan',
    'Konsumsi_Pangan_Tidak_Cukup','Jumlah_KPM_Bansos','Anggaran_Bansos',
    'Melek_Aksara','Tingkat_Pengangguran','Imunisasi_Lengkap',
    'Lama_Sekolah','Garis_Kemiskinan_Makanan','Kedalaman_Kemiskinan'
]
FEATURES_EXTRA = [
    'log_Anggaran_Bansos','log_Jumlah_KPM_Bansos','log_Garis_Kemiskinan_Makanan',
    'IPM_x_LamaSekolah','AksesGabungan','Pengangguran_per_IPM',
    'Bansos_per_KPM','Konsumsi_vs_IPM'
]
FEATURES = FEATURES_BASE + FEATURES_EXTRA

# ============================================================
# FUNGSI VISUALISASI
# ============================================================

def show_clustering(df):
    from sklearn.preprocessing import StandardScaler
    X_scaled = StandardScaler().fit_transform(df[FEATURES_BASE])
    df['Cluster'] = cluster_model.predict(X_scaled)
    cat = {0:'Rentan (Tertinggal)',1:'Sedang (Mainstream)',2:'Sejahtera (Maju)'}
    df['Kategori'] = df['Cluster'].map(cat)
    fig = px.choropleth(df, geojson=geojson, locations='Provinsi',
                        featureidkey='properties.Propinsi', color='Kategori',
                        color_discrete_map={'Rentan (Tertinggal)':'red',
                                            'Sedang (Mainstream)':'orange',
                                            'Sejahtera (Maju)':'green'},
                        title="Clustering Daerah Berdasarkan Sosial Ekonomi")
    fig.update_geos(fitbounds="locations", visible=False)
    st.plotly_chart(fig, use_container_width=True)

def show_classification(df):
    df['Pred_Sehat'] = cls_model.predict(df[FEATURES])
    df['Status'] = df['Pred_Sehat'].map({1:'Sehat',0:'Tidak Sehat'})
    fig = px.choropleth(df, geojson=geojson, locations='Provinsi',
                        featureidkey='properties.Propinsi', color='Status',
                        color_discrete_map={'Sehat':'green','Tidak Sehat':'red'},
                        title="Klasifikasi Daerah Sehat vs Tidak Sehat")
    fig.update_geos(fitbounds="locations", visible=False)
    st.plotly_chart(fig, use_container_width=True)

def show_regression(df):
    df['Pred_Stunting_Next'] = reg_model.predict(df[FEATURES])
    df['Kategori_Risiko'] = pd.cut(df['Pred_Stunting_Next'],
                                   bins=[0,5,10,100],
                                   labels=['Aman (<5%)','Sedang (5-10%)','Tinggi (>10%)'])
    fig = px.choropleth(df, geojson=geojson, locations='Provinsi',
                        featureidkey='properties.Propinsi',
                        color='Pred_Stunting_Next',
                        color_continuous_scale='RdYlGn_r',
                        title="Prediksi Stunting Tahun Depan per Provinsi (%)")
    fig.update_geos(fitbounds="locations", visible=False)
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(df[['Provinsi','Pred_Stunting_Next','Kategori_Risiko']].round(2))

# ============================================================
# NAVIGASI
# ============================================================

st.sidebar.header("ðŸ§­ Pilih Fitur Analisis")
menu = st.sidebar.radio("", ["Clustering", "Klasifikasi Kesehatan", "Prediksi Stunting"])

if menu == "Clustering":
    show_clustering(df)
elif menu == "Klasifikasi Kesehatan":
    show_classification(df)
else:
    show_regression(df)

st.sidebar.info("Developed by Nasya Talitha")