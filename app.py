# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zYTQrzw4n6dTT3PZ44hCY9qsoNeg4k8d
"""

# ================================================================
# STREAMLIT APP - DASHBOARD STUNTING INDONESIA (FINAL FIX V3)
# ================================================================

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import joblib, os, json, requests

# ------------------------------------------------
# PAGE CONFIG
# ------------------------------------------------
st.set_page_config(page_title="üìä Dashboard Stunting Indonesia", layout="wide")
st.title("üáÆüá© Dashboard Analisis Stunting Indonesia")
st.markdown("### *Clustering, Klasifikasi, dan Prediksi Stunting berbasis Data Sosial Ekonomi*")
st.markdown("---")

# ------------------------------------------------
# RENAME MAP (sinkron dengan training)
# ------------------------------------------------
RENAME_MAP = {
    "Angka Harapan Hidup (AHH) Menurut Provinsi dan Jenis Kelamin (Tahun)": "Angka_Harapan_Hidup",
    "Persentase Rumah Tangga yang Memiliki Akses terhadap Sanitasi Layak Menurut Provinsi dan Klasifikasi Desa (Persen)": "Akses_Sanitasi_Layak",
    "Rumah Tangga yang Memiliki Akses Terhadap Sumber Air Minum Layak": "Akses_Air_Layak",
    "Persentase Rumah Tangga dengan Sumber Air Minum Air Dalam Kemasan": "Air_Kemasan",
    "Indeks Pembangunan Manusia": "IPM",
    "Prevalensi Ketidakcukupan Konsumsi Pangan (Persen)": "Konsumsi_Pangan_Tidak_Cukup",
    "Realisasi Jumlah Keluarga Penerima Manfaat (KPM) Bantuan Sosial Pangan (BANSOS PANGAN)": "Jumlah_KPM_Bansos",
    "Realisasi Anggaran Bantuan Sosial Pangan (BANSOS PANGAN) (Rp)": "Anggaran_Bansos",
    "Angka Melek Aksara Penduduk 15-59 Tahun Menurut Provinsi": "Melek_Aksara",
    "Tingkat Pengangguran Terbuka Menurut Provinsi (Persen)": "Tingkat_Pengangguran",
    "Persentase Anak Umur 12-23 Bulan yang Menerima Imunisasi Dasar Lengkap Menurut Provinsi (Persen)": "Imunisasi_Lengkap",
    "Rata-Rata Lama Sekolah Penduduk Umur 15 Tahun ke Atas Menurut Provinsi": "Lama_Sekolah",
    "Garis Kemiskinan Makanan (Rupiah/Kapita/Bulan) Menurut Provinsi dan Daerah": "Garis_Kemiskinan_Makanan",
    "Indeks Kedalaman Kemiskinan (P1) Menurut Provinsi dan Daerah (Persen)": "Kedalaman_Kemiskinan"
}

# ------------------------------------------------
# LOAD DATA
# ------------------------------------------------
@st.cache_data
def load_data():
    df_ = pd.read_excel("DATA_SUM_STUNTING.xlsx")
    df_.columns = [c.strip() for c in df_.columns]
    df_.rename(columns=RENAME_MAP, inplace=True)
    return df_

df = load_data()

# ================= Sidebar Upload =================
st.sidebar.subheader("üì§ Upload Dataset Baru (Opsional)")
uploaded_file = st.sidebar.file_uploader("Pilih file Excel (.xlsx)", type=["xlsx"])
if uploaded_file is not None:
    df = pd.read_excel(uploaded_file)
    df.columns = [c.strip() for c in df.columns]
    df.rename(columns=RENAME_MAP, inplace=True)
    st.sidebar.success("‚úÖ Data berhasil dimuat dari file upload!")

if "Provinsi" not in df.columns:
    st.error("‚ùå Kolom 'Provinsi' tidak ditemukan di dataset.")
    st.stop()

# ------------------------------------------------
# FEATURE ENGINEERING (sinkron dengan training)
# ------------------------------------------------
df = df.copy()

# Transformasi log
if "Anggaran_Bansos" in df.columns:
    df["log_Anggaran_Bansos"] = np.log1p(df["Anggaran_Bansos"])
if "Jumlah_KPM_Bansos" in df.columns:
    df["log_Jumlah_KPM_Bansos"] = np.log1p(df["Jumlah_KPM_Bansos"])
if "Garis_Kemiskinan_Makanan" in df.columns:
    df["log_Garis_Kemiskinan_Makanan"] = np.log1p(df["Garis_Kemiskinan_Makanan"])

# Fitur interaksi dan rasio
if all(col in df.columns for col in ["IPM", "Lama_Sekolah"]):
    df["IPM_x_LamaSekolah"] = df["IPM"] * df["Lama_Sekolah"]
if all(col in df.columns for col in ["Akses_Air_Layak", "Akses_Sanitasi_Layak"]):
    df["AksesGabungan"] = df["Akses_Air_Layak"] * df["Akses_Sanitasi_Layak"]
if all(col in df.columns for col in ["Tingkat_Pengangguran", "IPM"]):
    df["Pengangguran_per_IPM"] = df["Tingkat_Pengangguran"] / (df["IPM"] + 1e-6)
if all(col in df.columns for col in ["Anggaran_Bansos", "Jumlah_KPM_Bansos"]):
    df["Bansos_per_KPM"] = np.where(df["Jumlah_KPM_Bansos"] > 0,
                                   df["Anggaran_Bansos"] / df["Jumlah_KPM_Bansos"],
                                   df["Anggaran_Bansos"])
if all(col in df.columns for col in ["Konsumsi_Pangan_Tidak_Cukup", "IPM"]):
    df["Konsumsi_vs_IPM"] = df["Konsumsi_Pangan_Tidak_Cukup"] / (df["IPM"] + 1e-6)

# ------------------------------------------------
# CLEAN DATA
# ------------------------------------------------
def clean_input_data(dfin):
    d = dfin.copy()
    for col in d.columns:
        if d[col].dtype == object:
            d[col] = d[col].replace(",", ".", regex=True)
            d[col] = pd.to_numeric(d[col], errors="coerce")
    return d.fillna(d.median(numeric_only=True))

df = clean_input_data(df)

# ------------------------------------------------
# LOAD MODELS
# ------------------------------------------------
@st.cache_resource
def load_models_and_meta():
    cluster = joblib.load("models/cluster_model.pkl")
    clf = joblib.load("models/classification_model.pkl")
    reg = joblib.load("models/regression_model.pkl")
    meta = {}
    if os.path.exists("models/expected_features.json"):
        with open("models/expected_features.json", "r", encoding="utf-8") as f:
            meta = json.load(f)
    return cluster, clf, reg, meta

cluster_model, clf_model, reg_model, expected = load_models_and_meta()

# ------------------------------------------------
# GEOJSON LOADER
# ------------------------------------------------
PROV_COORDS = {
    "ACEH": (4.70, 96.75), "SUMATERA UTARA": (2.11, 99.55), "SUMATERA BARAT": (-0.74, 100.80),
    "RIAU": (0.29, 101.71), "KEPULAUAN RIAU": (0.92, 104.45), "JAMBI": (-1.61, 103.61),
    "SUMATERA SELATAN": (-3.32, 104.91), "BENGKULU": (-3.58, 102.35), "LAMPUNG": (-4.56, 105.41),
    "KEP. BANGKA BELITUNG": (-2.74, 106.44), "BANTEN": (-6.41, 106.06), "DKI JAKARTA": (-6.17, 106.83),
    "JAWA BARAT": (-6.89, 107.64), "JAWA TENGAH": (-7.15, 110.14), "D I YOGYAKARTA": (-7.79, 110.37),
    "JAWA TIMUR": (-7.54, 112.24), "BALI": (-8.34, 115.09), "NUSA TENGGARA BARAT": (-8.65, 117.36),
    "NUSA TENGGARA TIMUR": (-8.66, 121.08), "KALIMANTAN BARAT": (-0.13, 111.10), "KALIMANTAN TENGAH": (-1.68, 113.38),
    "KALIMANTAN SELATAN": (-3.09, 115.28), "KALIMANTAN TIMUR": (0.54, 116.42), "KALIMANTAN UTARA": (2.84, 117.39),
    "SULAWESI UTARA": (1.49, 124.84), "GORONTALO": (0.70, 122.45), "SULAWESI TENGAH": (-1.43, 121.45),
    "SULAWESI BARAT": (-2.84, 119.23), "SULAWESI SELATAN": (-3.67, 119.97), "SULAWESI TENGGARA": (-4.14, 122.17),
    "MALUKU": (-3.24, 130.15), "MALUKU UTARA": (1.57, 127.81), "PAPUA": (-4.27, 138.08),
    "PAPUA BARAT": (-1.34, 133.17), "PAPUA BARAT DAYA": (-0.88, 131.26), "PAPUA PEGUNUNGAN": (-4.10, 138.94),
    "PAPUA SELATAN": (-8.49, 140.40), "PAPUA TENGAH": (-3.36, 135.50)
}

@st.cache_data
def load_geojson():
    urls = [
        "https://raw.githubusercontent.com/superpikar/indonesia-geojson/master/indonesia-prov.geojson",
        "https://raw.githubusercontent.com/superpikar/indonesia-geojson/master/indonesia-province.geojson"
    ]
    for url in urls:
        try:
            r = requests.get(url, timeout=10)
            r.raise_for_status()
            st.success(f"üåç GeoJSON dimuat: {url}")
            return r.json()
        except Exception:
            continue
    st.error("‚ùå Tidak ada GeoJSON valid. Menggunakan titik koordinat manual.")
    dummy = {"type": "FeatureCollection", "features": []}
    for prov, (lat, lon) in PROV_COORDS.items():
        dummy["features"].append({
            "type": "Feature", "properties": {"Propinsi": prov},
            "geometry": {"type": "Point", "coordinates": [lon, lat]},
        })
    return dummy

geojson = load_geojson()

# ------------------------------------------------
# FIXED plot_map (string safe)
# ------------------------------------------------
def plot_map(df_map, color_col, title, discrete=False, discrete_map=None):
    dfp = df_map.copy()
    if "Provinsi" not in dfp.columns:
        st.error("‚ùå Kolom 'Provinsi' tidak ditemukan di dataset.")
        return

    dfp["Provinsi"] = dfp["Provinsi"].astype(str).fillna("Unknown")
    dfp["prov_up"] = dfp["Provinsi"].str.upper().str.strip()

    dfp["lat"] = dfp["prov_up"].map(lambda p: PROV_COORDS.get(p, (np.nan, np.nan))[0])
    dfp["lon"] = dfp["prov_up"].map(lambda p: PROV_COORDS.get(p, (np.nan, np.nan))[1])
    dfp = dfp.dropna(subset=["lat", "lon"])

    if len(dfp) == 0:
        st.warning("‚ö†Ô∏è Tidak ada data lokasi valid untuk divisualisasikan.")
        return

    if discrete:
        fig = px.scatter_geo(dfp, lat="lat", lon="lon", color=color_col,
                             hover_name="Provinsi", color_discrete_map=discrete_map or {}, title=title)
    else:
        fig = px.scatter_geo(dfp, lat="lat", lon="lon", color=color_col,
                             hover_name="Provinsi", color_continuous_scale="RdYlGn_r", title=title)

    fig.update_geos(fitbounds="locations", showcountries=True)
    st.plotly_chart(fig, use_container_width=True)

# ------------------------------------------------
# SIDEBAR MODE
# ------------------------------------------------
st.sidebar.title("üìÅ Pilih Fitur Analisis")
mode = st.sidebar.radio("Pilih mode:", ["üß≠ Clustering", "üè• Klasifikasi Kesehatan", "üìà Prediksi Stunting"])

# ------------------------------------------------
# CLUSTERING
# ------------------------------------------------
if mode == "üß≠ Clustering":
    st.subheader("üß≠ Clustering Tingkat Kerentanan Stunting per Provinsi")
    try:
        df["Provinsi"] = df["Provinsi"].astype(str)
        X = df[expected.get("features_base", [])]
        X = clean_input_data(X)
        cluster_labels = cluster_model.predict(X)
        df["Cluster"] = cluster_labels
        cluster_map = {0: "Sejahtera (Maju)", 1: "Sedang (Mainstream)", 2: "Rentan (Tertinggal)"}
        df["Kategori_Cluster"] = df["Cluster"].map(cluster_map)
        plot_map(df, "Kategori_Cluster", "üó∫Ô∏è Clustering Kerentanan Stunting",
                 discrete=True, discrete_map={"Sejahtera (Maju)": "green",
                                              "Sedang (Mainstream)": "orange",
                                              "Rentan (Tertinggal)": "red"})
    except Exception as e:
        st.error(f"‚ùå Gagal menjalankan clustering: {e}")

# ------------------------------------------------
# KLASIFIKASI
# ------------------------------------------------
elif mode == "üè• Klasifikasi Kesehatan":
    st.subheader("üè• Klasifikasi Daerah Sehat vs Tidak Sehat")
    try:
        df["Provinsi"] = df["Provinsi"].astype(str)
        X = df[expected.get("features_all", [])]
        X = clean_input_data(X)
        y_pred = clf_model.predict(X)
        df["Prediksi_Sehat"] = np.where(y_pred == 1, "Sehat", "Tidak Sehat")
        plot_map(df, "Prediksi_Sehat", "üó∫Ô∏è Daerah Sehat vs Tidak Sehat",
                 discrete=True, discrete_map={"Sehat": "green", "Tidak Sehat": "red"})
    except Exception as e:
        st.error(f"‚ùå Gagal menjalankan klasifikasi: {e}")

# ------------------------------------------------
# REGRESI
# ------------------------------------------------
else:
    st.subheader("üìà Prediksi Stunting Tahun Depan")
    try:
        df["Provinsi"] = df["Provinsi"].astype(str)
        X = df[expected.get("features_all", [])]
        X = clean_input_data(X)
        y_pred = reg_model.predict(X)
        df["Prediksi_Stunting_TahunDepan"] = y_pred
        plot_map(df, "Prediksi_Stunting_TahunDepan", "üó∫Ô∏è Prediksi Stunting Tahun Depan (%)", discrete=False)
        st.dataframe(df[["Provinsi", "Prediksi_Stunting_TahunDepan"]]
                     .sort_values("Prediksi_Stunting_TahunDepan").reset_index(drop=True))
    except Exception as e:
        st.error(f"‚ùå Gagal menjalankan prediksi: {e}")