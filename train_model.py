# -*- coding: utf-8 -*-
"""train_model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11vr-WhBZMnyQY7POmNkpU2-zP1vHQTY1
"""

# ============================================================
# TRAINING PIPELINE - SESUAI FILE ASLI
# ============================================================

import pandas as pd
import numpy as np
import joblib, os
from sklearn.preprocessing import StandardScaler, RobustScaler
from sklearn.cluster import KMeans
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split

# Pastikan folder models tersedia
os.makedirs("models", exist_ok=True)


# ------------------------------------------------------------
# LOAD DATA
# ------------------------------------------------------------
DATA_PATH = "DATA_SUM_STUNTING.xlsx"
df = pd.read_excel(DATA_PATH)

df.rename(columns={
    "Angka Harapan Hidup (AHH) Menurut Provinsi dan Jenis Kelamin (Tahun)": "Angka_Harapan_Hidup",
    "Persentase Rumah Tangga yang Memiliki Akses terhadap Sanitasi Layak Menurut Provinsi dan Klasifikasi Desa (Persen)": "Akses_Sanitasi_Layak",
    "Rumah Tangga yang Memiliki Akses Terhadap Sumber Air Minum Layak": "Akses_Air_Layak",
    "Persentase Rumah Tangga dengan Sumber Air Minum Air Dalam Kemasan": "Air_Kemasan",
    "Indeks Pembangunan Manusia": "IPM",
    "Prevalensi Ketidakcukupan Konsumsi Pangan (Persen)": "Konsumsi_Pangan_Tidak_Cukup",
    "Realisasi Jumlah Keluarga Penerima Manfaat (KPM) Bantuan Sosial Pangan (BANSOS PANGAN)": "Jumlah_KPM_Bansos",
    "Realisasi Anggaran Bantuan Sosial Pangan (BANSOS PANGAN) (Rp)": "Anggaran_Bansos",
    "Angka Melek Aksara Penduduk 15-59 Tahun Menurut Provinsi": "Melek_Aksara",
    "Tingkat Pengangguran Terbuka Menurut Provinsi (Persen)": "Tingkat_Pengangguran",
    "Persentase Anak Umur 12-23 Bulan yang Menerima Imunisasi Dasar Lengkap Menurut Provinsi (Persen)": "Imunisasi_Lengkap",
    "Rata-Rata Lama Sekolah Penduduk Umur 15 Tahun ke Atas Menurut Provinsi": "Lama_Sekolah",
    "Garis Kemiskinan Makanan (Rupiah/Kapita/Bulan) Menurut Provinsi dan Daerah": "Garis_Kemiskinan_Makanan",
    "Indeks Kedalaman Kemiskinan (P1) Menurut Provinsi dan Daerah (Persen)": "Kedalaman_Kemiskinan"
}, inplace=True)

# ------------------------------------------------------------
# CLEANSING
# ------------------------------------------------------------
# imputasi missing value per provinsi
df = df.groupby('Provinsi').apply(lambda g: g.fillna(g.mean())).reset_index(drop=True)

# hapus duplikat
df.drop_duplicates(inplace=True)

# tangani outlier (IQR capping)
num_cols = df.select_dtypes(include=np.number).columns
for col in num_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower, upper = Q1 - 1.5 * IQR, Q3 + 1.5 * IQR
    df[col] = np.clip(df[col], lower, upper)

# ------------------------------------------------------------
# FEATURE ENGINEERING
# ------------------------------------------------------------
df['log_Anggaran_Bansos'] = np.log1p(df['Anggaran_Bansos'])
df['log_Jumlah_KPM_Bansos'] = np.log1p(df['Jumlah_KPM_Bansos'])
df['log_Garis_Kemiskinan_Makanan'] = np.log1p(df['Garis_Kemiskinan_Makanan'])
df['IPM_x_LamaSekolah'] = df['IPM'] * df['Lama_Sekolah']
df['AksesGabungan'] = df['Akses_Air_Layak'] * df['Akses_Sanitasi_Layak']
df['Pengangguran_per_IPM'] = df['Tingkat_Pengangguran'] / (df['IPM'] + 1e-6)
df['Bansos_per_KPM'] = np.where(df['Jumlah_KPM_Bansos'] > 0,
                                df['Anggaran_Bansos'] / df['Jumlah_KPM_Bansos'],
                                df['Anggaran_Bansos'])
df['Konsumsi_vs_IPM'] = df['Konsumsi_Pangan_Tidak_Cukup'] / (df['IPM'] + 1e-6)

# fitur final
FEATURES_BASE = [
    'IPM', 'Akses_Sanitasi_Layak', 'Akses_Air_Layak', 'Air_Kemasan',
    'Konsumsi_Pangan_Tidak_Cukup', 'Jumlah_KPM_Bansos', 'Anggaran_Bansos',
    'Melek_Aksara', 'Tingkat_Pengangguran', 'Imunisasi_Lengkap', 'Lama_Sekolah',
    'Garis_Kemiskinan_Makanan', 'Kedalaman_Kemiskinan'
]
FEATURES_EXTRA = [
    'log_Anggaran_Bansos', 'log_Jumlah_KPM_Bansos', 'log_Garis_Kemiskinan_Makanan',
    'IPM_x_LamaSekolah', 'AksesGabungan', 'Pengangguran_per_IPM',
    'Bansos_per_KPM', 'Konsumsi_vs_IPM'
]
FEATURES = FEATURES_BASE + FEATURES_EXTRA

# ------------------------------------------------------------
# 1️⃣ CLUSTERING
# ------------------------------------------------------------
scaler = StandardScaler()
X_cluster = scaler.fit_transform(df[FEATURES_BASE])
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X_cluster)
joblib.dump(kmeans, "models/cluster_model.pkl")

# ------------------------------------------------------------
# 2️⃣ KLASIFIKASI
# ------------------------------------------------------------
mean_stunting = df['Stunting'].mean()
mean_ahh = df['Angka_Harapan_Hidup'].mean()
df['Label_Sehat'] = np.where(
    (df['Stunting'] < mean_stunting) & (df['Angka_Harapan_Hidup'] > mean_ahh),
    1, 0
)

X_cls = df[FEATURES]
y_cls = df['Label_Sehat']
X_train, X_test, y_train, y_test = train_test_split(X_cls, y_cls, test_size=0.25, random_state=42)

rf = RandomForestClassifier(n_estimators=300, max_depth=10, random_state=42)
rf.fit(X_train, y_train)
joblib.dump(rf, "models/classification_model.pkl")

# ------------------------------------------------------------
# 3️⃣ REGRESI
# ------------------------------------------------------------
X_reg = df[FEATURES]
y_reg = df['Stunting']
X_train, X_test, y_train, y_test = train_test_split(X_reg, y_reg, test_size=0.25, random_state=42)

xgb = XGBRegressor(
    n_estimators=600, learning_rate=0.05, max_depth=8,
    subsample=0.8, colsample_bytree=0.8, random_state=42,
    eval_metric='rmse'
)
xgb.fit(X_train, y_train)
joblib.dump(xgb, "models/regression_model.pkl")

print("✅ Semua model berhasil dilatih dan disimpan di folder /models/")